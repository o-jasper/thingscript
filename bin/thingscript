#!/bin/bash
#
#  Copyright (C) 25-05-2013 Jasper den Ouden.
#
#  This is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#

#Currently a userspace install.
export ROOTLIKE=/home/$USER/.thingscript/rootlike/

if [ "$WHICH_TYPE" == "" ]; then
    WHICH_TYPE="main"
fi

if [ "$THINGSCRIPT_PATH" == "" ]; then
    THINGSCRIPT_PATH="thingscript:$THINGSCRIPT_ADDITIONAL_PATH\
/home/$USER/.thingscript/$WHICH_TYPE:/home/$USER/.thingscript_share/$WHICH_TYPE:/etc/thingscript:/usr/share/thingscript/$WHICH_TYPE"
fi

export PATH=/home/$USER/.thingscript_share/rootlike/bin:$PATH

#Dont know why the double loop didnt work, bash sucks.
get_locations()
{
    for dir in $(echo $THINGSCRIPT_PATH | tr : '\n'); do
        for el in `echo $@`; do #First what the user tells you to do.
            echo $dir/$el
        done
    done
    if [ "$WHICH_TYPE" != "main" ]; then #If you run out try main anyway.
        for el in `echo $@`; do 
            echo ~/.thingscript/main/$el
        done
        for el in `echo $@`; do
            echo /etc/thingscript/main/$el
        done
        for el in `echo $@`; do
            echo /usr/share/thingscript/main/$el
        done
    fi
}

#Gets layout information.
get()
{   for el in `get_locations $@`; do #Go through all the files.
        if [ -e $el ]; then  #See if the file exists.
            echo $el
            return #Have one.
        fi
    done
    case "$2" in
        "--dont-recurse")
            ;;
        "--otherwise")
            echo $3;;
        *) #See if there is a script to get it.
            if [ -e $1 ]; then
                echo 'BUG: how can the file '$1' exist and yet the absense script be called?' \
                    > /dev/stderr
            fi
            GET_SCRIPT=$(get on_absence/$1 --dont-recurse)
            if [ "$GET_SCRIPT" !=  "" ]; then
                $GET_SCRIPT $@
            fi;;

    esac
}

export IS_TEST=`get is_test`

get_page()
{   get $1.html $1.md $1.html_ $1.md_ $1
}

get_image()
{ 
    get $1.png $1.jpg $1.svg $1.gif
}

handle_get()
{
    handle "$(get_page $@)"
}

cat_get()
{   cat "$(get $2)"
}
url()
{   VAL=$(cat_get $@)
    case "$VAL" in
        ./*)
            echo $THINGSCRIPT_ROOT$(echo $VAL | tail -c +3) ;;
        *)
            echo $VAL;;
    esac
}


#Handles pages, doing scripts/substitutions within.
handle()
{
    if [ "$1" == "" ]; then #Nothing here.
        return
    fi
    if [ ! -e $1 ]; then #File doesnt exist.
        exit #TODO do something?
    fi
    VAL=`echo $1 | cut -f 3 -d'.'`
    if [ "$VAL" = "" ]; then
        VAL=`echo $1 | cut -f 2 -d'.'`
    fi
    case "$VAL" in
        md)
            markdown $1;;
        *_)  #Recurse.
            cat $1 | handle_whole;;
        md_)
            markdown $1 | handle_whole ;;
        *) 
            cat $1 ;;
    esac
}

cat_or_run() #List 
{
    if [ "$1" == "" ]; then
        $2
    else
        cat $1
    fi
}

#TODO how it works and the lack of escaping is less-than optimal.
handle_whole()
{
    tr '$' '\n' | while read LINE; do
        FIRST=`echo "$LINE" | cut -f 1 -d ' '`
        if [ "$FIRST" == "" ]; then
            echo $LINE
            continue
        fi
        case "$LINE" in
            *'.cat')
                cat_get el/`echo $LINE` 
                continue ;;
            *_) #Layout stuff.
                handle_get el/`echo $LINE`
                continue ;;
        esac
        GOT=`get el/$FIRST`
        if [ "$GOT" != "" ]; then  #Got something, yay.
            $GOT $LINE #Run it
            continue
        fi        
        echo $LINE  #Just a plain line to be outputted.
    done
}

get_help()
{   FILE=`get help/$1`
    test -d $FILE
    if [ "$?" == "0" ]; then
        echo $FILE/readme.md
    else
        echo $FILE
    fi
}

case "$1" in
    get)
        get $2;;
    exec)
        `get $2` $3 $4 $5 $6 $7 $8 $9;;
    get_page)
        get_page $2;;
    get_image)
        get_image $2;;
    
    '--help')
        cat "`get_help`";;
    help) #Help stdout.
        cat "`get_help $2`"
        if [ "$?" != "0" ]; then
         #TODO try figure out if it pertains to a file we know? 
         # (if in thingscript/ directory or under one in the list)
            echo Turns out no help page for $2 exists.
        fi;;
    help_browser) #Help into browser. TODO probably want CSS.
        PREFERRED=`get prefer/browser`
        if [ "$PREFERRED" == "" ]; then
            PREFERRED="xdg-open"
        fi
        $PREFERRED $(get doc/html/$2.html) ;;
    mk) #TODO idea: have a `mk` directory and make it `mk page`
        "`get bin/mk/$2`" $3 $4 $5 $6 $7 $8 $9;;
    version)
        cat /usr/share/thingscript/version;;

    handle)
        handle $2;;
    handle_get)
        handle_get $2;;
    cat_get) #Opens the file obtained with `get`
        cat_get $@;;
    url)
        url $@;;
    markdown_get)
        markdown "`get $@`";;
    
    ibin) #Runs an internal bin file intended to be basically a separate entity.
        $ROOTLIKE/bin/`echo $@ | cut -f2- -d' '`;;
    
    *) #TODO more info, `help`
        echo Did not recognize thingscript command $1 > /dev/stderr
esac
