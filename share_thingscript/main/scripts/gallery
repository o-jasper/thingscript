#!/bin/bash
#
#  Copyright (C) 22-05-2013 Jasper den Ouden.
#
#  This is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#

#Lays out a list of the images in javascript.

to() #Thingscript out file to keep things slightly more organized.
{   
    DIRNAME=tso
    if [ "$2" == "yes" ]; then
        mkdir -p `dirname $1`/$DIRNAME/
    fi
    echo $el | grep -xP '.+\.stl' > /dev/null
    if [ "$?" == "0" ]; then
        echo `dirname $1`/$DIRNAME/`basename $1`
    else
        echo $1
    fi
}

FIRST="true"
for el in `grep -vxP "#.+" $1`; do
    if [ $FIRST == "true" ]; then
        echo '<script>
var imgs = ["'`to $el`\"
        FIRST="false"
    else
        echo ',"'`to $el`'"'
    fi
done
echo '];

var designs =[];'

for el in `grep -xP '.+\.(stl|obj)' $1 | grep -vxP '#.+'`; do
    #Exists and is up to date.
    file=$PROJECT_DIR$el
    ofile=`to $file yes`
    if [ $ofile.js -nt $file ]; then
        echo skipping: stl2js $file\; already done > /dev/stderr
    else #Note: $ofile includes $PROJECT_DIR
        echo 'designs["'`to $el`'"]=' > $ofile.js
        $ROOTLIKE/bin/stl2js $file >> $ofile.js
        echo ';' >> $ofile.js
    fi
    #TODO optional delayed loads? 
done

#Some functions to switch to images. #TODO better in a separate js file i think.
echo '
var cur_gal_index = 1;
function to_img_re_url(index)
{   var to_ind = location.href.indexOf("#");
    if( to_ind != -1 )
    {   location.href = location.href.substr(0,to_ind) + "#img_" + index; }
    else
    {   location.href = location.href + "#img_" + index; }
    to_img(index)
}

function to_img(index)
{   cur_gal_index = index;
    var file = imgs[index];
    var ext  = file.substr(file.length-4);
    if( ext==".jpg" || ext==".png" || ext==".gif" ) //Put an image there.
    {   document.getElementById("viewer").src = file;
    }
    else if( ext==".stl" || ext==".obj" ) //Disable image, put design.
    {    js_import(file + ".js");
         document.getElementById("say").innerHTML = file + ".js"
         thingiview.loadArray(designs[file]);
         document.getElementById("viewer").src = null;
    }
}
</script>'

#Lays out the main image and...
FIRST=`head -n 1 $1`
echo '<img id="viewer" style="width:400px;height:400px">'
I=0
echo '<table><tr>'
for el in `grep -vxP '#.+' $1`; do
    file=$PROJECT_DIR$el
    img=$el
    echo $el | grep -xP '.+\.stl' > /dev/null
    if [ "$?" == "0" ]; then #Make image for .stl
        ofile=`to $file yes`
        if [ $ofile.png -nt $file ]; then #Check if up to date.
            echo skipping: stl2pov $file\; already done > /dev/stderr
        else
            echo running: stl2pov $file > /dev/stderr
            $ROOTLIKE/bin/stl2pov $file > $ofile.pov
            #Actually run povray.
            povray $ofile.pov $POV_ARGS +O$ofile.png > /dev/null
        fi
        img=`to $el`.png #Linked image.
    fi
    echo '<td><img onclick="to_img_re_url('$I')" src="'$img'"></td>'
    I=`expr $I + 1`
done
# ...a set of images with which to navigate.
echo '</tr></table>
<script>
var any_p =0;
for (var i=0 ; i<imgs.length ; i++)
{   if( location.href.indexOf("#img_"+i)!= -1 )
    {   to_img(i);
        any_p=1;
        break;
    }
}
if( any_p==0 ){ to_img(0); }
</script>'
